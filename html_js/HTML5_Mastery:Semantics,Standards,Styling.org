#+TITLE: HTML5 Mastery: Semantics, Standards, and Styling - Notes
#+AUTHOR: Chen Yang(matthias)
#+EMAIL: matthias_cy@outlook.com
* HTML术语和概念
  HTML文档有三大基础构建：元素，属性和文字。
** 元素
   用来告诉浏览器如何处理一些内容的标记。每个元素有一个关键字，定义了他们代表的是什么。不同的元素定义了不同的行为。
   元素与标签有一些细微的差别。标签是元素的一部分。

   空元素
   在HTML里，空元素（也叫void element）简单的写成<img>、<br>、 <meta>、 <hr>, 不需要结束标签。在
   XHTML、HTML的XML形式里，空元素需要一个空格和斜杠，比如<img/>、<br/>、<meta/>、或者<hr/>，被称之
   为自关闭标签（self-closing tag）。
** 属性
   属性出现在元素的开始标签里，用来改变元素某些方面的行为。可以看作键/值对，比如：
   #+BEGIN_SRC html
   <a href="contact.html">Here is some text that links to a contact page.</p>
   #+END_SRC
** 文档模型（Document Object Model, DOM）
   它是用来以节点树来表示文档的标准方法。节点表示了页面的元素、属性、文字内容。通过分支和树形结构，DOM描
   述了节点怎样连在一起。
* HTML5
** 简介
*** 向后兼容
*** 将浏览器端处理错误的方式标准化
*** 简化doctype
    doctype说明了以何种文档类型定义（Document Type Definition, DTD）
    HTML经常以文档声明（doctype declaration）开始，过去是这样：
    HTML 4.01
    #+BEGIN_SRC html
    <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
    #+END_SRC
    或者
    XHTML 1.0
    #+BEGIN_SRC html
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
    #+END_SRC
    因为HTML5是向后兼容的，所以只需要说这个页面显示的是HTML，因此doctype被简化为：
    #+BEGIN_SRC html
    <!doctype html>
    #+END_SRC
    为了兼容老HTML生成系统，下面的HTML5声明也是接受的：
    #+BEGIN_SRC html
    <!doctype html SYSTEM "about:legacy-compat">
    #+END_SRC
**** doctype的目的
    1. 告诉用户代理和校验器这个文档是按照什么DTD写的。
    2. 对于实际操作，最重要的是通知浏览器读取文档时用那种方法解析。
       文档的三种解析方式：
       · 非怪异（标准）模式
       · 怪异模式
       · 部分怪异（几乎标准）模式
    浏览器根据doctype字符串的存在、不存在及它的值来确定哪种渲染模式。
*** 简化的字符编码
    HTML5标准强烈建议所有的HTML文档都设置字符编码。推荐的方法是让服务器把它作为响应头部的一部分发送，HTTP Content-Type。
    如果无法实现，可以使用在HTML文档头部的meta元素。
    在HTML 4.01里，meta元素是这样的：
    #+BEGIN_SRC html
    <meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
    #+END_SRC
    在HTML5里，这种写法仍然会被向后兼容，但推荐写法更短，并且包含一个新属性 - charset：
    #+BEGIN_SRC html
    <meta charset="uft-8"/>
    #+END_SRC
*** 新的内容模型类别 #<<content-model>>
    内容模型类别（cotent model）用来指定特定HTML元素包含的内容类型。传统上被归为两类：
    块级（block）和行内（inline）
    在HTML5里被扩展到了7个主要类别：
    · 元数据内容（metadata content）
    · 文档流内容（flow content）
    · 区块内容（sectioning content）
    · 标题内容（heading content）
    · 语句内容（phrasing content）
    · 内嵌内容（embedded content）
    · 交互内容（interactive content）
*** 新元素
*** 微数据
*** 内嵌MathML和SVG
*** API
    包括可以通过class来选择元素的JavaScript API。比如：
    #+BEGIN_SRC javascript
    document.getElementByClassName("aClass")[0]
    #+END_SRC
*** 不再遵循SGML
*** 废弃的特性
**** 元素：
|-----------+--------------------------------|
| element   | replacement                    |
|-----------+--------------------------------|
| applet    | embed/object                   |
|-----------+--------------------------------|
| acronym   | abbr                           |
|-----------+--------------------------------|
| bgsound   | audio                          |
|-----------+--------------------------------|
| dir       | ul                             |
|-----------+--------------------------------|
| frame     | iframe/CSS                     |
|-----------+--------------------------------|
| frameset  |                                |
|-----------+--------------------------------|
| noframes  |                                |
|-----------+--------------------------------|
| isindex   | input from form text input     |
|-----------+--------------------------------|
| listing   | pre/code                       |
|-----------+--------------------------------|
| nextid    | global id                      |
|-----------+--------------------------------|
| noembed   | object as subtitution of embed |
|-----------+--------------------------------|
| plaintext | text/plain                     |
|-----------+--------------------------------|
| rb        | directly in ruby element       |
|-----------+--------------------------------|
| strike    | del; s                         |
|-----------+--------------------------------|
| xmp       | code， < %lt > &gt             |
|-----------+--------------------------------|
| basefont  | CSS                            |
|-----------+--------------------------------|
| big       | h1, strong or mark             |
|-----------+--------------------------------|
| blink     | CSS                            |
|-----------+--------------------------------|
| center    |                                |
|-----------+--------------------------------|
| font      |                                |
|-----------+--------------------------------|
| marquee   |                                |
|-----------+--------------------------------|
| multicol  |                                |
|-----------+--------------------------------|
| nobr      |                                |
|-----------+--------------------------------|
| spacer    |                                |
|-----------+--------------------------------|
| Tt        | kbd, var, code or samp         |
|-----------+--------------------------------|
| u         | em, b or mark                  |
|-----------+--------------------------------|
|           |                                |

**** 属性
|----------+--------------------------------------------------------------------------------------|
| element  | discarded property                                                                   |
|----------+--------------------------------------------------------------------------------------|
| a        | charset, coords, datafld, datasrc, methods, name, rev, shape, urn                    |
|----------+--------------------------------------------------------------------------------------|
| area     | nohref                                                                               |
|----------+--------------------------------------------------------------------------------------|
| body     | alink, background, bgcolor,link, marginbottom, marginheight, margin left,            |
|          | marginright, margintop, marginwidth, text, vlink                                     |
|----------+--------------------------------------------------------------------------------------|
| br       | clear                                                                                |
|----------+--------------------------------------------------------------------------------------|
| button   | datafld, dataformatas, datasrc                                                       |
|----------+--------------------------------------------------------------------------------------|
| caption  | align                                                                                |
|----------+--------------------------------------------------------------------------------------|
| col      | align, char, charoff, valign, width                                                  |
|----------+--------------------------------------------------------------------------------------|
| div      | align, datafld, dataformatas, datasrc                                                |
|----------+--------------------------------------------------------------------------------------|
| dl       | compact                                                                              |
|----------+--------------------------------------------------------------------------------------|
| embed    | align, hspace, name, vspace                                                          |
|----------+--------------------------------------------------------------------------------------|
| fieldset | datafld                                                                              |
|----------+--------------------------------------------------------------------------------------|
| form     | accept                                                                               |
|----------+--------------------------------------------------------------------------------------|
| h1 - h6  | align                                                                                |
|----------+--------------------------------------------------------------------------------------|
| head     | profile                                                                              |
|----------+--------------------------------------------------------------------------------------|
| hr       | align, color, noshade, size, width                                                   |
|----------+--------------------------------------------------------------------------------------|
| html     | version                                                                              |
|----------+--------------------------------------------------------------------------------------|
| iframe   | align, allowtransparency, datafld, datasrc, frameborder, hspace, logndesc,           |
|          | marginheight, marginwidth, scrolling, vspace                                         |
|----------+--------------------------------------------------------------------------------------|
| img      | align, border(except if value is 0), datafld, datasrc, hspace, longdesc,             |
|          | lowsrc, name, vspace                                                                 |
|----------+--------------------------------------------------------------------------------------|
| input    | align, datafld, dataformatas, datasrc, hspace, usemap, vspace                        |
|----------+--------------------------------------------------------------------------------------|
| label    | datafld, dataformatas, datasrc                                                       |
|----------+--------------------------------------------------------------------------------------|
| legend   | align, datafld, dataformatas, datasrc                                                |
|----------+--------------------------------------------------------------------------------------|
| li       | type                                                                                 |
|----------+--------------------------------------------------------------------------------------|
| link     | charset, methods, rev, target, urn                                                   |
|----------+--------------------------------------------------------------------------------------|
| menu     | compact                                                                              |
|----------+--------------------------------------------------------------------------------------|
| meta     | scheme                                                                               |
|----------+--------------------------------------------------------------------------------------|
| object   | align, archive, border, classid, code, codebase, codetype, datafls,                  |
|          | dataformatas, datasrc, declare, hspace, stanby, vspace                               |
|----------+--------------------------------------------------------------------------------------|
| ol       | compact                                                                              |
|----------+--------------------------------------------------------------------------------------|
| option   | dataformatas, datasrc, name                                                          |
|----------+--------------------------------------------------------------------------------------|
| p        | align                                                                                |
|----------+--------------------------------------------------------------------------------------|
| pre      | witdth                                                                               |
|----------+--------------------------------------------------------------------------------------|
| script   | event, for, language                                                                 |
|----------+--------------------------------------------------------------------------------------|
| select   | datafld, dataformatas, datasrc                                                       |
|----------+--------------------------------------------------------------------------------------|
| span     | datafld, dataformatas, datasrc                                                       |
|----------+--------------------------------------------------------------------------------------|
| table    | align, backgorund, bgcolor, border(except if value is 1 or ""), cellpadding          |
|          | cellspacing, dataformats, datapagesize, datasrc, frame, rules, summary, width        |
|----------+--------------------------------------------------------------------------------------|
| tbody    | align, background, char, charoff, valign                                             |
|----------+--------------------------------------------------------------------------------------|
| td       | abbr, align, axis, background, bgcolor, char, charoff, height, nowrap, valign, width |
|----------+--------------------------------------------------------------------------------------|
| textarea | datafld, datasrc                                                                     |
|----------+--------------------------------------------------------------------------------------|
| tfoot    | align, background, char, charoff, valign                                             |
|----------+--------------------------------------------------------------------------------------|
| th       | abbr, align, axis, background, bgcolor, char, charoff, height, nowrap, valign, width |
|----------+--------------------------------------------------------------------------------------|
| thead    | align, background, char, charoff, valign                                             |
|----------+--------------------------------------------------------------------------------------|
| tr       | align, background, bgcolor, char, charoff, valign                                    |
|----------+--------------------------------------------------------------------------------------|
| ul       | compact, type                                                                        |
|----------+--------------------------------------------------------------------------------------|
*** 浏览器支持情况
    可以给出支持情况的网站：
    http://caniuse.com
    and
    http://html5test.com
** 元素
*** 全局属性
    所有HTML元素都拥有的全局属性
    | property        | html5 |
    |-----------------+-------|
    | accesskey       |       |
    |-----------------+-------|
    | class           |       |
    |-----------------+-------|
    | contenteditable | *     |
    |-----------------+-------|
    | contextmenu     | *     |
    |-----------------+-------|
    | dir             |       |
    |-----------------+-------|
    | draggable       | *     |
    |-----------------+-------|
    | dropzone        | *     |
    |-----------------+-------|
    | hidden          | *     |
    |-----------------+-------|
    | id              |       |
    |-----------------+-------|
    | lang            |       |
    |-----------------+-------|
    | spellcheck      | *     |
    |-----------------+-------|
    | style           |       |
    |-----------------+-------|
    | tabindex        |       |
    |-----------------+-------|
    | title           |       |
    |-----------------+-------|
    | data-*          | *     |
    |-----------------+-------|
more: http://www.w3.org/TR/2011/WD-html5-20110525/
**** 可访问性
     用accesskey和tabindex属性可以通过键盘来访问页面元素，对于有行动障碍的用户会有帮助。
     在元素上设置accesskey属性后，就可通过按下键盘上的键来激活元素。

     tabindex，在页面上反复按下Tab，不同的元素将会被聚焦。tabindex从小数字开始
     #+BEGIN_SRC html
     <ul>
       <li><a href="first.html" tabindex="1">First Item Active</a></li>
       <li><a href="third.html" tabindex="3">Third Item Active</a></li>
       <li><a href="second.html" tabindex="2">Second Item Active</a></li>
     </ul>
     #+END_SRC
**** 元数据
     title属性为元素提供了一个参考信息。通常的形式是当鼠标悬浮在一个链接、表单输入框或缩写时，展示一个小提示。
     #+BEGIN_SRC html
     <a href="http://w3.org" title="World Wide Web Consortium">W3C</a>
     #+END_SRC
     当鼠标悬浮到链接文字"W3C"上时，会弹出小提示"World Wide Web Consortium"。

     lang，指定了元素内文本书写语言
     #+BEGIN_SRC html
     <html lang="en">
     #+END_SRC
**** 唯一标识
***** id
      * 每个页面，一个值能且仅能标识一个元素。
***** class
      * 每个页面可以出现多个。
      * 也个特定的class属性可以有多个class名，用空格分隔。
***** 引用
****** CSS
       id前用(#)，class前用(.),像这样：
       #+BEGIN_SRC css
       #about-text { background: blue; }
       .homepage {color: white; }
       #+END_SRC
****** JavaScript
       #+BEGIN_SRC javascript
       document.getElementById("about-text");
       document.getElementByClassName("homepage");
       #+END_SRC
**** 可编辑性
     contenteditable属性用在新的编辑API（Editing API）。编辑API允许对页面内容的实时编辑。
     这个概念是让HTML元素可以被编辑，使网页表单富文本编辑器以及类似应用可以被较容易地创建（例如，用网页来创建富文本的
     博客文章）。
**** 拼写检查
     spellcheck属性，用于指定一个元素是否因该进行拼写检查。
**** 隐藏元素
     hidden属性，用于隐藏和显示HTML元素。这与CSS中 display:none 属性的效果一样。
     下面的HTML和JavaScript片段展示了怎样用hidden来显示和隐藏内容：
     #+BEGIN_SRC html
     <dl id="fox">
       <dt></dt>
       <dd id="latin" hidden>Vulpes vulpes</dd>
     </dl>
     #+END_SRC
     JavaScript增加了在鼠标划过名字时显示隐藏的功能：
     #+BEGIN_SRC javascript
     // ie
     function toggleLatin() {
       var entry = document.getElementById("fox");
       var latin = document.getElementById("latin");
       entry.onmouseover = function() {
         latin.hidden = false;
       };
       entry.onmouseout = function() {
         latin.hidden = true;
       };
     }
     window.onload = toggleLatin();
     #+END_SRC
**** 拖拽
     draggable和dropzone属性是HTML朝着构建应用而不是文档的方向发展的例子。但是当可用时，这些属性允许HTML元素被拖动到
     页面的一个部分并且放置到另一个元素上，剩下的需要JavaScript事件来控制。
**** 样式
     sytle属性用来直接在元素上应用CSS样式。
**** 文字方向
     dir属性用来控制文本流的方向。如果整个文本块使用从右向左排列的语言，那么使用"rtl",代表right-to-left，并且
     在容器元素上使用"ltr",代表left-ro-right，这样，文本和标点都护翻转。
     #+BEGIN_SRC html
     <p dir="rtl">When redered by a brower, this paragraph will apera aligned to the right.</p>
     <p>While this paragraph will not because it lacks a <code>dir</code> attribute.</p>
     #+END_SRC
     CSS的direction属性也提供了相同的功能，可用的值有：
     inherit，ltr，rtl
     然而，不应该使用这样的CSS，因为这种信息应该内嵌在页面本身，这样即使关联的样式表被禁用了，文本的内容仍然可以被确定。
**** 自定义数据
     data-*时多种属性的混合，任何属性名都可以使用来在HTML元素上存储数据。

*** 内容模型类别
    7个类别[[content-model]]
    more:
    [[http://dev.w3.org/html5/spec-author-view/index.html#element-content-categories]]
    [[http://whatwg.org/specs/web-apps/current-work/#element-content-categories]]
**** 根元素（root element）
     html元素，它包含了文档里所有其他的HTML元素，也叫根元素。
     根元素是大量标签可选的元素中的一个。虽然标签可选，但是元素没有被忽略。可选元素如果被省略了，那么会被隐性
     包含（body是个例外，如果没有页面内容，他会被忽略）。比如，以下是一个完全合法的HTML5文档：
     #+BEGIN_SRC html
     <!doctype html><title>Tiny HTML5</title><p>This is a valid HTML5 page!
     #+END_SRC
***** 开始和结束标签可选的HTML元素
      |----------+--------------+------------|
      | element  | starting tag | ending tag |
      |----------+--------------+------------|
      | body     | optional     | optional   |
      |----------+--------------+------------|
      | colgroup | optional     | optional   |
      |----------+--------------+------------|
      | dd       | essential    | optional   |
      |----------+--------------+------------|
      | dt       | essential    | optional   |
      |----------+--------------+------------|
      | head     | optional     | optional   |
      |----------+--------------+------------|
      | html     | optional     | optional   |
      |----------+--------------+------------|
      | li       | essential    | optional   |
      |----------+--------------+------------|
      | optgroup | essential    | optional   |
      |----------+--------------+------------|
      | option   | essential    | optional   |
      |----------+--------------+------------|
      | p        | essential    | optional   |
      |----------+--------------+------------|
      | rp       | essential    | optional   |
      |----------+--------------+------------|
      | rt       | essential    | optional   |
      |----------+--------------+------------|
      | tbody    | optional     | optional   |
      |----------+--------------+------------|
      | td       | essential    | optional   |
      |----------+--------------+------------|
      | tfoot    | essential    | optional   |
      |----------+--------------+------------|
      | th       | essential    | optional   |
      |----------+--------------+------------|
      | thead    | essential    | optional   |
      |----------+--------------+------------|
      | tr       | essential    | optional   |
      |----------+--------------+------------|
***** html元素属性
      除了全局属性外，html元素还有一个新属性：manifest，用在创建离线应用的一个新API中。当使用时，应用的基本功能
      组件可以被缓存在浏览器，这样，如果用户离线并刷新页面，功能仍然可用。
***** 根据HTML5标准检查文档合法性
      访问[[http://html5.validator.nu]] 或 [[http://validator.w3.org]]
      两者都提供了页面，可以根据给出的网站URL、上传HTML文件或直接输入HTML来进行校验。
**** 文档元数据（document metadata）和脚本元素(scripting elements)
     在head根标签后，出现的是head元素的开始标签，它包括文档的元数据元素，其用于指定页面属性，比如浏览器显示的文档标题、
     页面元素的默认URL、字符编码信息，以及外链和内嵌的CSS样式表。
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | element  | meta | flow | sectioning | heading | phrasing | embedded | interactive | html5 |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | title    | *    |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | base     | *    |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | meta     | *    | *    |            |         | *        |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | link     | *    | *    |            |         | *        |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | style    | *    | *    |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | script   | *    | *    |            |         | *        |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | noscript | *    | *    |            |         | *        |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
***** 网页信息：title和meta
****** title
      title是唯一的头部必需元素。
      使用得当的文档标题的好处：
      * 更好的搜索引擎排名
      * 更加方便
      * 更好的可用性
****** meta
      meta元素的一个通常作用是设置页面编码，但也经常被用来设置一系列元数据信息和其它指令的键/值对。
      当创建”键“时，meta元素用http-equiv或name两个中的一个，值用cotent来设置。
      #+BEGIN_SRC html
      <!-- defines a set of keywords for the page's content -->
      <meta name="keywords" content="html5, css, javascript, semantic web, web apps"/>

      <!-- refreshes the page every 15 seconds -->
      <meta http-equiv="refresh" content="15"/>
      #+END_SRC
      详细的http-equiv和name属性参考：
      WHATWGPragamaExtensions: [[http://wiki.whatwg.org/wiki/PragmaExtensioins]]
      MetaExtensions wiki: http://wiki.whatwg.org/wiki/MetaExtensions
***** 链接、样式和资源：base，link，style
****** base
       每个文档只能有一个base元素。他应该出现于文档头部，早于任何其他包含URL的元素属性。
       作用:
       减少重复输入相同的根URL。它的两个属性href和target，指定了用的URL和默认目标（可用时）。
       例如，使用target属性说明链接是在新窗口还是在当前窗口中打开。
       比如，在头部出现了：
       #+BEGIN_SRC html
       <base href="http://example.com/portfolio/" target="_blank"/>
       #+END_SRC
       然后在body里有：
       #+BEGIN_SRC html
       <a href="photographs.html">Photography</a>
       #+END_SRC
       那么，点击链接会在新的窗口中找到链接网页。
****** link
       link元素有属性href, rel, media, hreflang, type, sizes，还有全局属性。至少href和rel是常用的。
       href指定了链接的资源的地址（URL），而rel指定了资源的类型。
       将样式表引入页面：
       #+BEGIN_SRC html
       <link href="main.css" rel="stylesheet" type="text/css"/>
       #+END_SRC
****** style
       style元素允许在HTML中直接插入CSS样式规则。
***** 增加行为和后备内容：script和noscript
****** script
       不仅支持直接在HTML文但里写入内嵌客户端JavaScript代码，也允许通过外部文件载入。
****** noscript
       用于在浏览器禁用和不支持脚本时来展示内容。
**** 文档区块元素（document sectioning elemaents）
     在结束head标签后是body的开始标签，它可以包括任何非头部标记。body标签传统上有一些展示属性：
     ground, text, link, vlink, alink
     所有这些属性在HTML4.01中都不建议使用，在HTML5里被标为废弃。这些效果应该通过CSS实现。CSS的
     background-color, color, a:link, a:visited, a:active。
***** 语义区块元素
      在body里出现的第一类元素是那些用于将内容组织成不同逻辑区块的元素。
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | element | meta | flow | sectioning | heading | phrasing | embedded | interactive | html5 |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | section |      | *    | *          |         |          |          |             | *     |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | nav     |      | *    | *          |         |          |          |             | *     |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | article |      | *    | *          |         |          |          |             | *     |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | aside   |      | *    | *          |         |          |          |             | *     |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | h1 ~ h6 |      | *    |            | *       |          |          |             |       |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | hgroup  |      | *    |            | *       |          |          |             | *     |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | header  |      | *    |            |         |          |          |             | *     |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | footer  |      | *    |            |         |          |          |             | *     |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
      | address |      | *    |            |         |          |          |             |       |
      |---------+------+------+------------+---------+----------+----------+-------------+-------|
**** 内容分组元素（content grouping elements）
     在页面的某一个内容块里，各种区块的组件被划分为段落、列表、图表等。段落里的其他元素将内容分组为比区块更小的单元。
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | element    | meta | flow | sectioning | heading | phrasing | embedded | interactive | html5 |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | p          |      | *    |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | hr         |      | *    |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | pre        |      | *    |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | blockquote |      | *    |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | ol         |      | *    |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | ul         |      | *    |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | li         |      |      |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | dl         |      | *    |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | dt         |      |      |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | dd         |      |      |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | figure     |      | *    |            |         |          |          |             | *     |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | figcaption |      |      |            |         |          |          |             | *     |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
     | div        |      | *    |            |         |          |          |             |       |
     |------------+------+------+------------+---------+----------+----------+-------------+-------|
***** 段落：p
      段落p经常被滥用，比如说：
      #+BEGIN_SRC html
      <p>&nbsp</p>
      <p>&nbsp</p>
      <p>&nbsp</p>
      <p>&nbsp</p>
      #+END_SRC
      这种效果完全应该用CSS实现。在内容下增加间隔空间的一个简单的方法是给相关内容增加一个class：
      #+BEGIN_SRC html
      <p class="section">Your content here.</p>
      #+END_SRC
      然后用CSS增加顶部或底部内边距：
      #+BEGIN_SRC css
      .section { padding-bottom: 3em; }
      #+END_SRC
***** 打断内容：hr
      hr元素，或者水平标尺，历来被作为一个展现元素，但是它被重新设计来代表两块内容之间的主题间断。
      hr带有几个属性：size，width, noshade, align,但在HTML5中都被标为废弃，应该用CSS来设置水平标尺样式。
***** 保持格式：pre
      这个效果还可以通过CSS的white-space:pre属性和值来实现。
***** 引用文字：blockquote
      blockquote元素有一个cite属性，让作者可以执行引用的出处。
***** 列表
      当前HTML标准里有三种列表：
      无序列表（ul）、有序列表（ol）、描述列表（dl）

      * 无序列表： 当内容没有特别的序列时。
      * 有序列表： 当内容有某种顺序时。
      * 描述列表： 用来把名字或者属于和值或其他数据联系起来，也就是跟某个对象直接建立关联的的对象集合，比如术语表。

      无序列表除了全局属性外没有其他任何属性。有序列表，有三个额外属性： reversed、start、type
      reversed -- 决定列表的排序方向，布尔属性。
      start -- 让作者可以用1之外的其他数字开始有序列表的序号。
      type -- 可以用来改变列表开头的记号，从十进制数改为罗马数字或者字母。强烈建议用CSS的list-style-type代替。

      Eric Meyer([[http://meyerweb.com/eric/css/edge/menus/demo.html][CSS menus]])

      Russ Weakly, Web Standards Group的主席之一，创建了大量的列表样式，在http://css.maxdesign.com.au 可找到。
      为了避免构建链接列表的麻烦，也值得一试[[http://accessify.com/tools-and-wizards/developer-tools/list-o-matic][Accessify's List-O-Matic]], 这是一个在线列表构建器，可以从
      中选择预先构建好的样式。

      [[http://www.htmldog.com/articles/suckerfish/dropdowns][Patrick Griffiths的Suckerfish Dropdowns脚本]]同时也提供了CSS和JavaScript的解决方案。

****** 描述列表：dl，dt，dd
       描述列表的构成：开始dl，紧跟一个术语dt,然后是任意数量的描述dd。一个典型的描述列表的样子：
       #+BEGIN_SRC html
       <dl>
         <dt>Bottle</dt>
         <dd>A receptable having a narrow neck, usually no handles, and a mouth that can be plugged,
         corked, or capped.</dd>
         <dd>To hold in; restrain: "bottled up my emotions."</dd>
         <dt>Rocket</dt>
         <dd>A vehicle or device propelled by one or more rocket engines, especially such a vehicle
         designed to travel through space.</dd>
       </dl>
       #+END_SRC
       一个定义术语只能包含语句内容，不能有文档流内容，所以不能使用段落、头部或这列表，这意味着属于不能有多层重用性，
       就像标题那样。但是，一个描述元素，可以包含任何文档流元素，或者其他元素的组合。
***** 图表、照片、图片：figure和figcaption
      figure元素的作用是表示图标、图片、代码等，并且可以自包含一个元素，为他们增加一个相关的标题（figcaption）。
      图表应该可以被移动和去除，而不影响文档的布局。
      例如：
      #+BEGIN_SRC html
      <figure>
        <img alt="Photograph of the Earth from space." src="earth.jpg" title="View of Earth"/>
        <img alt="Photograph of Mars from space." src="mars.jpg" title="View of Mars"/>
        <figcaption>The Earth and Mars shown side-by-side.</figcaption>
      </figure>
      #+END_SRC
***** 创建分块：div
      div（divsion）用来标记一块内容。他不会给内容增加特殊含义，而是为了使用CSS或JavaSrcipt。
**** 文本级语义元素（text-level semantics elements）
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | element | meta | flow | sectioning | heading | phrasing | embedded | interactive | html5 |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | a       |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | em      |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | strong  |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | small   |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | s       |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | cite    |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | q       |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | dfn     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | abbr    |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | time    |      | *    |            |         | *        |          |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | code    |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | var     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | samp    |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | kbd     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | sub     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | sup     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | i       |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | b       |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | mark    |      | *    |            |         | *        |          |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | ruby    |      | *    |            |         | *        |          |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | rt      |      |      |            |         |          |          |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | rp      |      |      |            |         |          |          |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | bdi     |      | *    |            |         | *        |          |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | dbo     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | span    |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | br      |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | wbr     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | ins     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | del     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
**** 表格数据元素（tabular data elements）
     表格只是用来显示数据的，只是一个数据表，没有其他含义。
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | element  | meta | flow | sectioning | heading | phrasing | embedded | interactive | html5 |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | table    |      | *    |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | caption  |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | colgroup |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | col      |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | tbody    |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | thead    |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | tfoot    |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | tr       |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | td       |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | th       |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
***** 表格基础
      一个表格的基本组成是：一个开始表格标签，紧跟着至少一行（tr），然后紧跟着的是至少一个表格单元（td，table data）。
      这是一个例子：
      #+BEGIN_SRC html
      <table>
        <tr>
          <td>Some data</td>
        </tr>
      </table>
      #+END_SRC
      下面的代码是一个两行两列的表格（内嵌的style用来增加边框以区分表格的布局）
      #+BEGIN_SRC html
      <style type="text/css">
      td { boder: 1px solid #ff0000}
      </style>
      <table>
        <tr>
          <td>Name</td>
          <td>Place of residence</td>
        </tr>
        <tr>
          <td>Anselm Bradford</td>
          <td>Auckland</td>
        </tr>
        <tr>
          <td>Paul Haine</td>
          <td>Oxford</td>
        </tr>
      </table>
      #+END_SRC
****** 添加表头
       可以通过标记表格顶部的头部来指明列，是表格更加清晰和便于阅读。虽然可以在每个表格单元格中增加一个class，然后用
       CSS实现，但更好的方法是把表格上方的表格单元变成真正的表头，用th代替td。
       #+BEGIN_SRC html
       <table>
         <tr>
           <th>Name</th>
           <th>Place of residence</th>
         </tr>
       ...
       </table>
       #+END_SRC
****** 增加说明：caption
       紧跟在开始table标签之后:
       #+BEGIN_SRC html
       <table>
         <caption>Personal details</caption>
         <tr>
           <th>Name</th>
           <th>Place of residence</th>
         </tr>
       </table>
       #+END_SRC
****** 增加结构：thead、tfoot、tbody
       这些元素可以用于将行分组到表头部分、表尾部分和主题部分。
       和th元素很像，如果需要，这些元素可以为CSS和脚本提供钩子。而不必增加额外的class和ID。像caption一样，这些元素
       必须以特定的顺序和位置出现在表格内部。首先，如果使用三者中的任意一个，那么必须包含thead。这个元素可以出现在任
       何地方，但最好是紧接在开始的table标签后，除非也使用了caption，这时，thead元素应紧跟在他的后面。tfoot必须出
       现在tbody之前。tbody实际上是隐含的，如果使用thead，tfoot，就必须显式使用tbody。
       #+BEGIN_SRC html
       <table>
         <thead>
           <tr>
             <th>Name</th>
             <th>Place of residence</th>
           </tr>
         </thead>
         <tfoot>
           <tr>
             <th>Name</th>
             <th>Place of residence</th>
           </tr>
         </tfoot>
         <tbody>
           <tr>
             <td>Anselm Bradford</td>
             <td>Auckland</td>
           </tr>
           <tr>
             <td>Paul Haine</td>
             <td>Oxford</td>
           </tr>
         </tbody>
       </table>
       #+END_SRC
****** 更多结构：colgroup和col
       如果单元格跨过一个以上的行或列，那么可以使用rowspan和colspan属性，它们接受一个数字值，代表一个单元格要跨过几个
       行列。
       #+BEGIN_SRC html
       ...
       <tr>
         <td rowspan="2">Anselm Bradford</td>
         <td>Auckland</td>
       </tr>
       <tr>
         <td>Vermont</td>
       </tr>
       <tr>
         <td>Paul Haine</td>
       </tr>
       ...
       #+END_SRC
       表格单元可以跨行或者列。只需要确保单元格和跨越数量总量统一。
       有两个元素来定义列和列的组，两者都是可选的：col和colgroup。
       colgroup元素用来指定表格里可以存在多少分组（所以每一个列分组一个colgroup，并且一个分组只能包含一列）以及每一个
       分组包含的列的数量，使用span属性和数字值。这个元素直接插入到开始table标签后，除了可选的col标签，它不包含任何其他
       元素。如下的表格：
       file:./pd.png
       #+BEGIN_SRC html
       <table>
         <caption>Personal details</caption>
         <tr>
           <th rowspan="2">Name</th>
           <th rowspan="2">Place of residence</th>
           <th colspan="3">Date of birth</th>
         </tr>
         <tr>
           <th>D</th>
           <th>M</th>
           <th>Y</th>
         </tr>
         <tr>
           <td>Anselm Bradford</td>
           <td>Auckland</td>
           <td>14</td>
           <td>11</td>
           <td>1979</td>
         </tr>
         <tr>
           <td>Paul Haine</td>
           <td>Oxford</td>
           <td>14</td>
           <td>6</td>
           <td>1978</td>
         </tr>
       </table>
       #+END_SRC
       这个表格有三个列分组，最后一列跨越了3个单元格。有了colgroup可以这样定义结构：
       #+BEGIN_SRC html
       <table>
         <colgroup></colgroup> <colgroup></colgroup> <colgroup span="3"></colgroup>
         <tr>
         ...
       #+END_SRC
       或者单个col和span属性：
       #+BEGIN_SRC html
       <table>
         <colgroup></colgroup> <colgroup></colgroup> <colgroup><col span="3"></colgroup>
         <tr>
         ...
       #+END_SRC
       虽然看上去有很多冗余信息，但有一些附带的好处，colgroup和col让浏览器可以在表格行的数据还没到达时开始渲染。没有
       这两个标签提供的信息，浏览器必须首先解析整个表格来找到哪行含有最多的单元格，接下去，浏览器必须计算那行的宽度，
       这样，才能知道表格的宽度，开始渲染。
**** 表单元素（form elements）
     一个表单的简单例子：
     #+BEGIN_SRC html
     <form action="handle_form.php">
       <label for="feedback">Please provide feedback on our form!</label>
       <br/>
       <textarea cols="50" id="feedback" rows="5" placeholder="Enter your coments here..."></textarea>
       <input name="" type="submit" value="Submit"/>
     </form>
     #+END_SRC
     file:./form1.png
     表单一般遵循以下格式：
     * 将表单组件包含在form元素里，它定义了处理表单提交数据的文件。
     * 定义一些收集输入的控件，比如文本框、下拉列表、单选框等。
     * 提供一个用于提交表单的按钮，使输入的数据可以被获取和处理。

     上面的例子有一个陌生的属性：placeholder，他会在文本输入框里增加一个灰色文本，用来提示应该输入的内容。
     表单相关内容模型：
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | element  | meta | flow | sectioning | heading | phrasing | embedded | interactive | html5 |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | form     |      | *    |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | fieldset |      | *    |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | legend   |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | label    |      | *    |            |         | *        |          | *           |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | input    |      | *    |            |         | *        |          | *           |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | button   |      | *    |            |         | *        |          | *           |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | select   |      | *    |            |         | *        |          | *           |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | datalist |      | *    |            |         | *        |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | optgroup |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | option   |      |      |            |         |          |          |             |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | textarea |      | *    |            |         | *        |          | *           |       |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | keygen   |      | *    |            |         | *        |          | *           | *     |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | output   |      | *    |            |         | *        |          |             | *     |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | progress |      | *    |            |         | *        |          |             | *     |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
     | meter    |      | *    |            |         | *        |          |             | *     |
     |----------+------+------+------------+---------+----------+----------+-------------+-------|
**** 内嵌内容元素（embedded content elements）
     元素的内容模型类别
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | element | meta | flow | sectioning | heading | phrasing | embedded | interactive | html5 |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | img     |      | *    |            |         | *        | *        | *           |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | iframe  |      | *    |            |         | *        | *        | *           |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | embed   |      | *    |            |         | *        | *        | *           | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | object  |      | *    |            |         | *        | *        | *           |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | param   |      |      |            |         |          |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | video   |      | *    |            |         | *        | *        | *           | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | audio   |      | *    |            |         | *        | *        | *           | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | source  |      |      |            |         |          |          |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | track   |      |      |            |         |          |          |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | canvas  |      | *    |            |         | *        | *        |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | map     |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | area    |      | *    |            |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|

     [[http://ro.me][参考Rome项目]] 以简单了解内嵌元素功能。

**** 交互元素（interactive elements）
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | element | meta | flow | sectioning | heading | phrasing | embedded | interactive | html5 |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | details |      |      | *          |         |          |          | *           | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | summary |      |      |            |         |          |          |             | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | command | *    |      | *          |         | *        |          |             |       |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
     | menu    |      |      | *          |         |          |          | *           | *     |
     |---------+------+------+------------+---------+----------+----------+-------------+-------|
***** 显示更多：summary和details
      这两个元素一起提供了一个可以隐藏和显示额外文字的“小工具”，而不需要JavaScript和CSS。
      summary元素是一个头部（或者摘要，就像元素名），点击可以切换details标签之间的内容显示或隐藏。
      简单的例子：
      #+BEGIN_SRC html
      <details>
        <summary>Legal Notices</summary>
        <small>All content copyright 2011 Anselm Bradford</small>
      </details>
      #+END_SRC
      这会显示一个切换文字“Legal Notice”，点击后，切换显示、隐藏版权声明。
      details元素可以包含任何文档流元素。比如：
      #+BEGIN_SRC html
      <details>
        <summary>A Midsummer Night's Dream</summary>
        <p>Duration: 1hr 42m</p>
        <p>Showtimes: </p>
        <ul>
          <li>Tuesday, 8pm</li>
          <li>Wednesday, 8pm</li>
          <li>Thursday, 8pm</li>
          <li>Friday, 6pm and 8pm</li>
        </ul>
      </details>
      #+END_SRC
      展示了剧院网站上的HTML，使用summary和details元素来显示、隐藏更多信息。
***** 工具条：menu和command
      在menu元素里放置几个独立的command元素，就可以创建出桌面菜单栏这样的应用。而且还可以用来创建上下文菜单或其他交互性
      的菜单选项列表。
** 语义
   "html的元素、属性和属性值都定义（在标准里）了某种含义（语义）。例如，ol元素代表有序列表，lang属性代表内容的语言。
   作者不能以他们本身合理的语义目的之外的方式来使用元素、属性和属性值。"  --  WHATWG HTML 标准

   语义化的HTML是关于描述内容类型的HTML元素。他关注在某一个HTML元素里包含内容后的含义，以及跟其他元素的比较。
*** 用大纲思考
    file:./outline.png
    一个设计优良的网站要使信息可以被高效地传达和获取。设计的目标是建立一套信息层级：
    页面的一些部分应该首先吸引用户的注意力，然后是第二点，依次类推。如果事先没有将所有内容组织为一套层级，那么在设计过
    程中，可能会不断发现这条或那条信息的重要性需要不断变化。所以，停一下，暂时离开设计，拿出纸笔，写下你的网站的主要内容。
    为每一条思考一个标签，以及它和页面其它内容的关系。忘掉详细内容，而是关注创建可以在主要区块内容之上的标签。把这个列表
    想象成为网站内容的目录或者站点地图、内容的先后顺序，以及还有那些内容从属于更大的区块。
    这样的列表有助于组织以及可视化网站的信息层级，HTML5标准真正提供了一个具体的算法。
*** HTML5 大纲算法（outline algorithm）
    一个区块（section）只是一组内容，把它想象成页面上包围内容的盒子，而标题就像是盒子上的标签，说明它里面有什么。
    简化以下，大纲算法的规则：

    1.将body元素作为根区块，所有其它页面都组织在下面。
    2.把第一个标题内容元素作为body的标题。
    3.对剩下的区块内容，定义并添加新的区块和子块区到大纲。
    4.将每一个子区块的第一个标题内容元素作为那个区块的标题。

    上面的步骤里，提到两个内容模型类别，即标题内容和区块内容。标题内容包括h1,h2,h3,h4,h5,h6和hgroup元素，
    而区块内容含有article, aside, nav 和 section元素。
**** 用标题内容隐形地创建大纲
     之前的网页大纲可以用h1,h2,h3,h4元素来创建顺序和层级：
     #+BEGIN_SRC html
     <!doctype html>
     <html lang="en">
     <head>
       <meta charset="UTF-8"/>
       <title>HTML5 Outline Algorithm</title>
     </head>
     <body>
       <h1>Site Title</h1>
       <h1>Main Navigation</h1>
       <h2>Featured</h2>
       <h3>An Article</h3>
       <h2>Other News</h2>
       <h3>Another Article</h3>
     </body>
     </html>
     #+END_SRC
     有个问题，这个页面除了body创建的根区块，还有其他区块。h1到h6的标题元素被称为有排名，t也就是他们名字里的数字。
     排名低的标题元素，但处于高的元素下面时，就会被嵌套在排名高的标题元素区块里。然而，如果标题元素的排名等于或高于
     前一个标题元素时，它会隱性地创建一个新的区块。
     #+CAPTION: 相邻标题元素的区块隐形创建，相同排名的相邻标题元素隐性创建新区块，排名低的相邻标题元素会隱性创建嵌套区块
     file:./html_section.png
     以前，通常的做法是在div元素里使用h1到h6元素来创建页面结构。这里的问题是div元素并不属于区块内容元素，根据HTML5
     大纲算法，它将无法将页面拆解为区块。隱性的区块创建提供了针对这种老式编码风格的兼容方案，因为区块可以根据div元素
     里的标题元素自动创建。但，这不是结构化页面区块的推荐做法。
**** 用区块内容创建大纲
     4个区块内容元素中，section元素是最通用的，它提供了一个跟主题相关的内容分组。
     参考下面的例子：
     #+BEGIN_SRC html
     ...
     <body>
       <h1>Site Title</h1>
       <section>
         <h2>Main Navigation</h2>
       </section>
       <section>
         <h2>Featured Content</h2>
         <section>
            <h3>An Article</h3>
            <section>
              <h4>Article Synopsis</h4>
            </section>
         </section>
       </section>
       <section>
         <h2>Other News</h2>
         <section>
           <h3>Another Article</h3>
         </section>
       </section>
     </body>
     #+END_SRC
     说明：第一个h1不需要区块，因为body就是它的区块。body属于一个特殊的元素类别，称为区块根（sectioning roots）,
     这类元素内部可能包含有一个大纲，但是如果他们被包含在另一个大纲里，那么它们内部的大纲就会被隐藏。

     有了区块元素，标题元素的排名就不再需要了。因此，标准这样说：
     “。。。强烈建议开发者只用h1元素，或者为区块的嵌套级别来使用合适的排名标题元素。”
**** 提高大纲的语义
     #+BEGIN_SRC ditaa :file sectionContent.png :cmdline -f -S
     +---------------+    +--+     +-------+
     | 是否包含导航链接 +---+ Y +-----+ <nav> +
     +-------+-------+    +--+     +-------+
             |
           +-+-+
           | N |
           +-+-+
             |
     +-------+-------+
     | 是否包含离开了周 |   +---+    +-----------+
     | 为内容仍然可以理 +---+ Y +----+ <article> |
     | 解的内容。      |   +---+    +-----------+
     +-------+-------+
             |
           +-+-+
           | N |
           +-+-+
             |
     +-------+-------+    +--+    +---------+
     | 是否跟周围内容关 +---+ Y +----+ <aside> +
     | 联不深         |    +--+    +---------+
     +-------+-------+
             |
           +-+-+
           | N |
           +-+-+
             |
     +-------+-------+
     | 是不是一个主题分 |   +---+   +-----------+
     | 组，并逻辑上可以 +---+ Y +---+ <section> |
     | 放在一个标题下面 |   +---+   +-----------+
     +-------+-------+
             |
           +-+-+
           | N |
           +-+-+
             |
     +-------+-------+
     | 该内容不是一个区 |
     | 块，或者只有暗含 |
     +---------------+
     #+END_SRC
     导航可以封装在nav里。article元素是为完全自我包含的内容设计的
**** 头和尾
     每一个区块可以增加可选的头和尾。header用于将介绍内容和区块的辅助导航（辅助导航可以是主菜单或者搜索框）分组到一起，所以它有可能包含区块的标题元素
     以及其他的介绍内容（目录、logo等）。footer包含跟区块或页面整体相关的内容，比如作者、版权信息、联系地值以及其他。
     页面的导航里有时含有相关链接或重复链接，但如果是不相关或冗余的，并对主导行不是至关重要的链接，那么一般解不需要放
     在nav元素里。
***** 使用hgroup
      可以将一组标题元素放在一起，然后HTML5大纲算法只会处理其中排名最高的。
      比如用h1封装标题，h2封装副标题，然后用hgroup将它们分组在一起，这样h2就不会创建一个新区块了。
      #+BEGIN_SRC html
      ...
      <body>
        <header>
          <hgroup>
            <h2>Site Slogn!</h2>
            <h1>Site Title</h1>
          </hgroup>
          <nav><h1>Main Navigation</h1></nav>
        </header>
        <section><h1>Featured Content</h1>
      ...
      #+END_SRC
***** 格式化有地址的尾部
      通常会在尾部包含一个元素用于放置作者或者作者网站拥有着的联系信息。address元素一般用于这种目的。
      说明：在除了article和body之外的区块元素里使用address元素，是不合适的。所以，一个section元素
      可能有一个footer，但是不能含有address元素。
      #+BEGIN_SRC html
      <body>

        <header>
          <hgroup>
            <h2>Site Slogan!</h2>
            <h1>Site Title</h1>
          </hgroup>
          <nav>
            <h1>Main Navigation</h1>
          </nav>
        </header>

        <section>
          <h1>Featured Content</h1>
          <article>
            <h1>An Article</h1>
            <aside>
              <h1>Articles Synopsis</h1>
            </aside>
          </article>
        </section>

        <section>
          <h1>Other News</h1>
          <article>
            <h1>Another Article</h1>
          </article>
        </section>

        <footer>
          <address>
            Contact:
            <a href="mailto:wm@example.com">Webmaster</a>
          </address>
        </footer>
      </body>
      #+END_SRC
***** 确定头尾内容
      #+CAPTION: 确定头尾内容
      #+BEGIN_SRC ditaa :file sectionContent.png :cmdline -f -S
                                   +----------------------+
                                   | 内容是否介绍了这个区块？ |
                                +--+----------------------+--+
                                |                            |
                              +-+-+                        +-+-+
                              | Y |                        | N |
                              +-+-+                        +-+-+
                                |                            |
                  +-------------+-----------+      +---------+-----------------------+
            +-----+ 是否多个内容块都是介绍性的？ |      |  内容是否为整个区块提供了额外的信息？ +------+
            |     +-------------+-----------+      +---------+-----------------------+      |
            |                   |                            |                              |
          +-+-+               +-+-+                        +-+-+                          +-+-+
          | N |               | Y |                        | Y |                          | N |
          +-+-+               +-+-+                        +-+-+                          +-+-+
            |                   |                            |                              |
            |                   |                            |                              |
        +---+---+         +-----+----+                 +-----+----+                         |
        | <h1>  |         | <header> |                 | <footer> |                         |
        +---+---+         +-----+----+                 +-----+----+                         |
            |                   |                            |                              |
            |                   |                            |                              |
          +-+-+      +----------+--------------+    +--------+--------------------+         |
          | N +------+ 同一个区块是否需要多个标题？ |    | 脚部提供的联系信息是针对一篇文章 |         |
          +---+      +----------+--------------+    | 还是整个页面？                |         |
                                |                   +--------+--------------------+         |
                                |                            |                              |
            +----------+      +-+-+                        +-+-+                      +-----+------+
            | <hgroup> +------+ Y |                        | Y |                      | 其它分组元素 |
            +----+-----+      +---+                        +-+-+                      +------------+
                 |                                           |
         +-------+------+                              +-----+-----+
         | <h1> -- <h6> |                              | <address> |
         +--------------+                              +-----------+
      #+END_SRC
**** 查看HTML5大纲
     有一个由Geoffrey Sniddon(http://gsnedders.com)开发的工具，用来解析HTML5代码，并返回大纲。访问
     http://gsnedders.html5.org/ouliner/ 可以上传HTML、输入URL来解析，或者直接在表单里输入HTML代码。
     单击"Outline this!",会展示你提供的HTML文档的区块大纲。
**** div、span过时了吗
     div本身e没有任何语义，所以用来分组关联内容、不相关内容、整个页面或者句子，都是合适的。从语义的角度来说，
     都是相同的，div并没有增加这些分组的语义。所以，用来匹配CSS规则或者用JavaScript获取内容，还是有用的。
     div用于文档流内容，而span用于语句内容。
** 表单
*** 表单元素复习
    表单非常简单，即让用户在一段输入一些数据，然后把这些数据发送到另一端，交由表单处理器（form handler）处理。form
    handler一般是一个处理输入数据的脚本，他用服务器编程语言或框架编写。可以把表单想象成你和网页服务器之间的HTML中间
    层。
    表单有一个form元素作为容器构成，封装其它任何数量的“表单控件“（用于收集输入的HTML元素），还有其他任何body里
    可用的标签。在所有的输入控件下面是一个按钮，用于提交表单。
    表单有两种方式发送数据：GET和POST。当使用GET时，表单提交的数据会出现在网址的URL里。
*** 分析表单元素
    form元素非常简单，只是作为一个容器，并且有很多属性。除了之前提到的method和action属性外，form元素还有以下属性：
    accept-charset、autocomplete、enctype、name、novalidate、target。其中一个属性，accept，在HTML5里被
    废弃了。
    #+BEGIN_SRC html
    <form action="handle_form.php" method="post" target="_blank" accept-charset="utf-8"
    enctype="multipart/form-data" autocomplete="off" novalidate></form>
    #+END_SRC
    虽然这里用了所有的属性，但是没有必要输入所有这些。一般而言至少action和method属性会用到。
*** 表单元素属性
**** action
     告诉用户代理(浏览器)当表单提交时如何处理表单的内容。
**** method
     设置表单为GET或POST。如果表单是主动修改数据（比如通过某种方式更新服务器端数据库），或者包含敏感数据（比如密码），
     那么表单应该使用POST。如果表单提交是被动的，比如搜索引擎的数据库查询，那么用GET。
**** accept-charset
     可以指定服务器可以处理何种编码的表单数据。为了防止字符显示错误，请使用utf-8。
**** enctype
     用于指定用何种编码来发送表单数据。有三个值可用：
     application/x-www.form-urlencoded
     multipart/form-data
     text/plain
     大部分情况下，它都可以忽略，因为第一个就是默认值。它会用URL安全的方式来编码数据。
**** target
     与a元素的target类似，告诉浏览器在哪里打开action指定的URL。
     _blank, _self, _parent
**** name
     用来为脚本标记表单。本质上这是一个用区分在同一个页面表单的ID。在JavaScript里，表单可以通过document.forms属性
     获取，它包含页面上所有表单的引用。例如，如果一个表单的属性含有name="contactform", 用JavaScript
     document.forms.contactform就可以获取它。
**** autocomplete和novalidate
     分别告诉浏览器是否要用保存的值来填充表格，以及是否要校验表单的输入。
*** 获取输入
    form元素只是一个数据获取元素的容器，这些元素被称为表单控件，包括 input、select、textarea元素。它们共有的属性：
    name属性。不像form元素的name属性那样，这里它更加重要。所有将数据提交给表单处理器的表单控件必须要有一个name属性；
    否则，当表单提交时，将不能发送它们的值。name属性都应该是唯一的。
    #+CAPTION:form input type
    |----------------+-------|
    | property       | html5 |
    |----------------+-------|
    | button         |       |
    |----------------+-------|
    | checkbox       |       |
    |----------------+-------|
    | color          | *     |
    |----------------+-------|
    | date           | *     |
    |----------------+-------|
    | datetime       | *     |
    |----------------+-------|
    | datetime-local | *     |
    |----------------+-------|
    | email          | *     |
    |----------------+-------|
    | file           |       |
    |----------------+-------|
    | hidden         |       |
    |----------------+-------|
    | image          |       |
    |----------------+-------|
    | month          | *     |
    |----------------+-------|
    | number         | *     |
    |----------------+-------|
    | password       |       |
    |----------------+-------|
    | radio          |       |
    |----------------+-------|
    | range          | *     |
    |----------------+-------|
    | reset          |       |
    |----------------+-------|
    | search         | *     |
    |----------------+-------|
    | submit         |       |
    |----------------+-------|
    | tel            | *     |
    |----------------+-------|
    | text           |       |
    |----------------+-------|
    | time           | *     |
    |----------------+-------|
    | url            | *     |
    |----------------+-------|
    | week           | *     |
    |----------------+-------|
**** 最初的输入类型
***** 文本输入框（text）
      可以用value属性来展示文本控件的内容：
      #+BEGIN_SRC html
      <input name="data" type="text" value="Default text"/>
      #+END_SRC
      value属性用于当前用户没有修改输入框里的值的情况下，提交的默认值。
***** 密码输入框（password）
      type="password" 区别在于字母输入后会被隐藏。
***** 文件输入类型（file）
      要让表单发送二进制数据，不如上传文件，要把表单的encypt属性设置为mulipart/form-data
      默认每次只能上传一个文件，然而，可以用布尔属性multiple来支持多个文件：
      #+BEGIN_SRC html
      <input name="filedata" type="file" multiple=/>
      #+END_SRC
      文件输入控件包括一个accept属性，理论上可以用来限制上传文件类型。它接受逗号分隔的MIME类型，比如这样：
      accpet="image/gif,image/jpeg,image/jpg"
***** 复选框（checkbox）
      一个复选框通常是一个方形的盒子，可以打钩或去掉，但是用JavaScript可以设置第三种“中间状态”（indeternimate）
      #+BEGIN_SRC javascript
      function init() {
        document.getElementById("option3").indeterminate = true;
      }
      window.onload = init;
      #+END_SRC
      要把复选框设置为勾选状态，可以使用checked属性。
      #+BEGIN_SRC html
      <input id="option" name="option" type="checkbox" checked />
      #+END_SRC
***** 单选按钮（radio）
      #+BEGIN_SRC html
      <input name="example" type="radio" value="first"/>
      #+END_SRC
***** 添加隐藏输入域（hidden）
      用于在表单中增加对用户不可见，但需要提交额外数据。
      #+BEGIN_SRC html
      <input name="hiddenValue" type="hidden" value="42"/>
      #+END_SRC
      当包含这个输入字段的表单提交时，"hiddenValue=42" 会出现在URL里（如果用GET方法的话），并且会随着表单的其它数据
      一起发送到服务器。

      说明：隐藏域有时候用来告知服务器可接受的上传文件的最大容量。例如：
      #+BEGIN_SRC html
      <input name="MAX_FILE_SIZE" type="hidden" value="20000"/>
      #+END_SRC
***** button, submit, reset, image
      button输入类型和button元素有很多重叠的特性。在两者之间，button元素是更好的选择。两者都会创建一个带有文字标签的可
      点击的按钮，区别是，button元素可以用html元素作为标签，而button输入类型只能用纯文字。submit和reset类型也会创建
      按钮，除此之外，还可以提交表单，以及将表单的值重置为默认值。image用于在提交按钮位置处放置图片。
**** 新输入类型
***** 调色板（color）
      color类型会创建一个color picker（color well）。颜色值以URL编码后的十六进制数值提交。例如，黑色会以%23000000
      发送，"%23"是"#"的URL编码，也就是说代表"#000000"。
***** 日期和时间输入类型
** 多媒体
*** img
    img元素一般需要两个属性：src和alt。
    src -- 指定实际图片文件的地址，可以是绝对地址或者相对地址。
    alt -- 用来在图片不可用时提供说明。
*** 图像映射（image map）
    用设置的“热点”来根据用户在图片上不同的的点击位置链接到不同的页面。
    有两种图像映射：服务器端和客户端的。在服务器端的图像映射里，点击的像素坐标发给服务器。服务器根据
    这个信息来确定用户点击位置，作出相应处理。只要在包含于锚点元素里的img元素上添加一个布尔属性ismap：
    #+BEGIN_SRC html
    <a href="process.php"><img alt="" src="map.png" ismap /></a>
    #+END_SRC
    客户端图像映射和服务器规则一样，但是热点是在服务端定义的。它需要更多的代码。有两个不同的部分：
    img以及相关联的map，两者没有嵌套。map元素是一个容器元素，有一个name属性，可以被图片元素的usemap
    属性引用，来建立两者的联系。实际的图像热点坐标定义在map元素里，可以包含任意数量的自关闭area元素。
    #+BEGIN_SRC html
    <img alt="" src="banner.png" width="300" height="272" usemap="#bannermap"/>
    <map name="bannermap">
      <area alt="About" coords="52,76,39" href="/about.html" shape="circle"/>
      <area alt="Contact" coords="120,56,187,102" href="/contact.html" shape="rect"/>
      <area alt="Portfolio" coords="265,148,221,99,221,42,266,24" href="portfolio.html" shape="poly"/>
      <area alt="Homepage" href="/index.html" shape="default"/>
    </map>
    #+END_SRC
*** 嵌入其它媒体
**** embed元素
     HTML5里的embed有4个属性：width,height,src,type。
     width和height属性指定了内嵌的媒体在页面上占据的空间，以像素为单位，而src指定了媒体源文件的地址。
     可以添加更多的属性来和插件通信。虽然标准里仍然还有它，但最好避免embed的使用，因为它的限制性和怪异。
     更好的选择是object元素。
**** object元素
     object不仅仅用作插件媒体，因为它也支持图片和内嵌网页。要作为*表单*提交的一部分，数据随表单提交。
***** 属性
      data属性就像img和embed元素的src属性，指定了资源的位置。
      type属性，给内嵌的资源一个合法的MIMIE类型。
      data和type必须有一个存在，但不必同时存在。如果两者同时存在，必须增加一个布尔属性typemustmatch，
      它增加了加载资源时的安全层。
**** 嵌入的HTML：iframe
     HTML5里的frame和frameset元素都被遗弃了，不应该再使用。HTML5保留的是iframe元素，即行内框架（inline frame）
     这个元素允许整个HTML页面（或者HTML代码片段）内嵌在另一个页面里。这种嵌套页面的功能对于在页面上加上第三方HTML
     代码很有用。例如第三方广告，其它的用途还有Facebook的"Like"按钮和Twitter的"tweet"按钮。
***** 处理iframe元素里的内容
      iframe元素创建一个设置长和宽的盒子，外部文档在这里载入。他根据src属性来加载内容。就像object，可以在开始和结束
      标签之间增加内容，作为浏览器不支持行内框架是的后备显示内容。
      #+BEGIN_SRC html
      <iframe frameborder="0" src="embed.html" width="300" height="150">
        <a href="embed.html">View embeded web page.</a>
      </iframe>
      #+END_SRC
      因为iframe在一个固定的区域显示内容，所以iframe也可以用于在限定的范围显示大量内容（一般是文字）。比如说条款和
      限制。
***** 新的iframe元素属性
      frameborder,marginheight,marginwidth,scrolling,longdesc都已被废弃。
      HTML5增加了少量以沙箱方式嵌入HTML代码的属性，意思是可以用于防止第三方恶意脚本。这里的初衷是用iframe来安全地
      在网页上加入第三方资源，比如博客和论坛的评论系统。这三个属性是srcdoc、seamless、sandbox。

      srcdoc属性允许HTML片段直接输入在属性值里，不想src那样需要给出URL指向另一个HTML文件。
      #+BEGIN_SRC html
      <iframe srcdoc="<p>This text is in an inline frame</>"><p>This is regular text</p></iframee>
      #+END_SRC
      如果存在srcdoc和src属性，srcdoc会被优先使用。

      seamless属性是一个布尔属性，使包含的内容成文容器文档的一部分。

      sandbox，可以作为布尔属性对待，但并不需要。当作为布尔属性时，它会增加很多iframe资源内容的安全限制：
      * 限制本地的调用
      * 禁止表单提交
      * 禁用JavaScript
      * 禁用链接外部目标
      * 禁用插件
      |----------------------|
      | sanbox property      |
      |----------------------|
      | allow-same-origin    |
      |----------------------|
      | allow-scripts        |
      |----------------------|
      | allow-forms          |
      |----------------------|
      | allow-top-navigation |
      |----------------------|
*** 视频(video)
    它与object播放视频不同，因为object只是把视频交给插件来处理。
    说明：video元素在主流浏览器里的支持非常不错，但如果你需要支持更老的浏览器考虑如下方案：
    http://html5media.info
**** 格式
     视频采用的压缩方法叫做编解码器（codec）。视频和音频一起叫做容器格式（container format），这才是真正的视频文件。
     互联网上主要有三种容器格式：WebM、Ogg、MPEG-4。容器格式包含一个视频压缩的编解码器和一个音频压缩的编解码器，还有
     视频的元数据。
     |-------------------+-------------+-------------+----+-----------+------------------+----------+----------|
     | Containder Format | Video Codec | Audio Codec | IE | Firefox 5 | Google Chrome 13 | Safari 5 | Opera 11 |
     |-------------------+-------------+-------------+----+-----------+------------------+----------+----------|
     | WebM              | VP8         | Vorbis      |    | *         | *                |          | *        |
     |-------------------+-------------+-------------+----+-----------+------------------+----------+----------|
     | OGG               | Theora      | Vorbis      |    | *         | *                |          | *        |
     |-------------------+-------------+-------------+----+-----------+------------------+----------+----------|
     | MPEG-4            | H.264       | AAC         | *  |           | *                | *        |          |
     |-------------------+-------------+-------------+----+-----------+------------------+----------+----------|
**** 版权问题
     MPEG-4、H.264和ACC编解码器包含技术专利。意味着这些格式的使用将面临MPEGLA协会的使用费。
**** 处理视频资源
     就像img一样：
     #+BEGIN_SRC html
     <video src="trailer.webm" width="320" height="240"></video>
     #+END_SRC
     然而，这没有为i不支持WebM格式或者不支持video元素的浏览器提供后备的内容。要为一个视频提供多个源文件，
     source元素，用来提供其它内容。source有三个属性：src、type、media。用src来指定视频文件的位置，
     type用来提供一个视频的MIME类型，以提示浏览器处理的视频类型。
     #+BEGIN_SRC html
     <video src="" width="320" height="240">
       <!--这里的单引号在双引号的周围不能相反，因为MIMI类型的编解码器需要内容用双引号-->
       <source src="trailer.webm" type='video/webm; codec="vp8, vorbis"'/>
     </video>
     #+END_SRC
     |-----------------------------------------------------+--------------------------------------------|
     | Video Format                                        | MIME Type                                  |
     |-----------------------------------------------------+--------------------------------------------|
     | WebM                                                | video/webm; codecs="vp8, vorbis"           |
     |-----------------------------------------------------+--------------------------------------------|
     | Ogg                                                 | video/ogg; codecs="theora, vorbis"         |
     |-----------------------------------------------------+--------------------------------------------|
     | MPEG-4 (baseline) - mobile delivery                 | video/mp4; codecs="avc1.42E01E, mp4a.40.2" |
     |-----------------------------------------------------+--------------------------------------------|
     | MPEG-4 (main) - standard-definition video broadcast | video/mp4; codesc="avc1.4D401E, mp4a.40.2" |
     |-----------------------------------------------------+--------------------------------------------|
     | MPEG-4 (hight) - high-definition video broadcase    | video/mp4; codecs="avc1.64001E, mp4a.40.2" |
     |-----------------------------------------------------+--------------------------------------------|
     WHATWG发布的一篇有用的type属性需要的MIME类型摘要,http://wiki.whatwg.org/wiki/Video_type_parameters

     media指定了视频优化针对的设备或者媒体。
**** 视频属性
***** 增加视频控件
      时需要为video添加布尔controls属性。
***** 自动播放和循环视频
      布尔属性loop。
***** 预加载视频数据
      preload：可以是none、metadata、auto。如果设置为空，相当于auto。
***** 添加海报图片
      poster属性，图片可以任选
***** 视频静音
      布尔属性muted
***** 设置跨域策略
      crossorigin属性定义在一份叫做跨域资源共享（Cross-Origin Resource Sharing，CORS）的标准里，它定义了视频怎样
      在不同的网站域之间共享。它的值是anonymous或use-credentials。
      更多信息：[[http://www.w3.org/TR/cors][W3C]]
***** 媒体组
      mediagroup属性的目的是支持视频分组，以便同时控制。
***
*** 音频
    这个元素其实只是没有活动画面的video元素。控件看起来就是浏览器原生创建的。它有以下属性：
    src、preload、autoplay、loop、muted、controls、crossorigin、mediagroup。
**** 音频格式
     大部分与视频部分的内容相似。Ogg格式使用Vorbis编解码器（WebM也是用它），文件后缀为.oga。MPEG-4容器里使用
     Advanced Audio Coding（ACC）作为音频编解码器，因为他是在MPEG-4容器里的，所以通常使用.m4a作为文件后缀，以区分
     .mp4。ACC编码的音频可以免费在互联网上播放（在内容获得授权的情况下），但是并不是完全没有专利。开发编解码ACC工具
     需要授权（[[http://www.vialicensing.com/licensing/aac-fees.apsx][授权费用]]）。
     WAV是无压缩音频格式，文件比Ogg Vorbis和ACC更大。MP3也可以使用，但是它的版权要求比ACC更加严格，所以最好避免。
*** 编码
    * HandBrake: 开元的MP4文件生成器。http://handbrake.fr
    * Firefogg: Ogg编码的Firefox扩展。http://firefogg.org
    * FFmpeg: 很强大的工具套件。 http://ffmpeg.org
    * Miro video converter: 拖拽转换器，只有Mac版本。http://www.mirovideoconverter.com/
    * VLC: 灵活的媒体播放器，可以处理所有的网络视频和音频格式。它带有一个转换格式的导出向导。 http://videllan.org/vlc
    * Adobe Media Encode。
** CSS3
** 用户交互、HTML5 API
*** 图像
